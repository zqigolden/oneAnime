---
name: "Build Linux"

on:
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'
        required: true
        default: 'warning'
  push:
    branches:
      - main
      - develop
    paths:
      - 'lib/**'
      - 'linux/**'
      - 'pubspec.yaml'
      - '.github/workflows/build-linux.yaml'

jobs:
  flutter-build-linux:
    name: "Build Linux"
    runs-on: "ubuntu-latest"
    permissions: write-all

    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Extract branch/tag name
        run: |
          if [[ "${{ github.event_name }}" == "push" ]]; then
            echo "ref_name=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
          else
            echo "ref_name=manual-$(date +%Y%m%d-%H%M%S)" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Echo build progress
        run: echo "Building oneAnime_linux_${{ env.ref_name }}.tar.gz"

      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev libstdc++-12-dev

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version-file: pubspec.yaml

      - name: Enable Linux desktop
        run: flutter config --enable-linux-desktop

      - name: Get Flutter dependencies
        run: flutter pub get

      - name: Inject DanDan API Credentials
        run: |
          sed -i "s/kvpx7qkqjh/${{ secrets.DANDANAPI_APPID }}/g" lib/utils/mortis.dart
          sed -i "s/rABUaBLqdz7aCSi3fe88ZDj2gwga9Vax/${{ secrets.DANDANAPI_KEY }}/g" lib/utils/mortis.dart

      - name: Build Flutter Linux
        run: flutter build linux --release

      - name: Verify build output
        run: |
          ls -la build/linux/x64/release/bundle/
          file build/linux/x64/release/bundle/oneanime
          ldd build/linux/x64/release/bundle/oneanime || true

      - name: Create AppImage structure
        run: |
          mkdir -p AppDir/usr/bin
          mkdir -p AppDir/usr/share/applications
          mkdir -p AppDir/usr/share/icons/hicolor/256x256/apps

          # Copy application
          cp -r build/linux/x64/release/bundle/* AppDir/usr/bin/

          # Copy desktop file
          cp oneAnime.desktop AppDir/usr/share/applications/com.zqigolden.oneanime.desktop

          # Copy icon (using placeholder for now)
          cp assets/images/logo/logo_rounded.png AppDir/usr/share/icons/hicolor/256x256/apps/com.zqigolden.oneanime.png || echo "Icon not found, using placeholder"

          # Create AppRun
          cat > AppDir/AppRun << 'EOF'
          #!/bin/bash
          cd "$(dirname "$0")"
          exec ./usr/bin/oneanime "$@"
          EOF
          chmod +x AppDir/AppRun

      - name: Create tarball
        run: |
          tar -czf oneAnime_linux_${{ env.ref_name }}.tar.gz -C build/linux/x64/release/bundle .

      - name: Upload Linux build
        uses: actions/upload-artifact@v4
        with:
          name: linux_build
          path: oneAnime_linux_*.tar.gz
          retention-days: 30

      - name: Upload AppImage structure
        uses: actions/upload-artifact@v4
        with:
          name: linux_appimage_structure
          path: AppDir/
          retention-days: 30